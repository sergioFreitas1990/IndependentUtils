using IndependentUtils.Configuration.Attributes;
using System.Collections.Generic;

namespace IndependentUtils.Configuration.IntegrationTests.AutogeneratedSection
{
    /*
     * The concept being shown here is that, a section code is created
     * automatically by simply creating an interface. Once the interface
     * is parsed, a file is generated with the specific configuration code
     * that implements this interface.
     */
    [AutogenerateSection("dates-section")]
    public interface IExampleSection
    {
        [AutogenerateProperty("name")]
        string Name { get; }
        
        [AutogenerateProperty("important-dates", AddItemName = "date", IsRequired = true)]
        IEnumerable<IDateElement> ImportantDates { get; }

        [AutogenerateProperty("mandatory-dates", AddItemName = "date", IsRequired = true)]
        IEnumerable<IDateElement> MandatoryDates { get; }

        [AutogenerateProperty("time-formats", IsRequired = true)]
        ITimeFormatOptions TimeFormats { get; }
    }

    [AutogenerateElement]
    public interface ITimeFormatOptions
    {
        [AutogenerateProperty("format", IsRequired = true)]
        string Format { get; }

        [AutogenerateProperty("is-local", IsRequired = false, DefaultValue = true)]
        bool IsLocal { get; }
    }

    [AutogenerateElement("t => new System.DateTime(t.Year, t.Month, t.Day)")]
    public interface IDateElement
    {
        [AutogenerateProperty("day", IsRequired = true)]
        int Day { get; }

        [AutogenerateProperty("month", IsRequired = true)]
        int Month { get; }

        [AutogenerateProperty("year", IsRequired = true)]
        int Year { get; }
    }
}
